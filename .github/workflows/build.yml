name: Build
on:
  pull_request:
    types: 
      - opened
      - synchronize
      - reopened
    branches: 
      - main
  workflow_dispatch:
  
jobs:
  container:
    name: Test Container Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check out code
        uses: actions/checkout@v2
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag container image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pitt-cicd-demo
          IMAGE_TAG: ${{ github.run_id }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Scan Container Image
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/pitt-cicd-demo:${{ github.run_id }}
          sarif: false
          args: --file=Dockerfile
            --severity-threshold=low
            --sarif-file-output=container.snyk.sarif
          
      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: container.snyk.sarif
          category: container

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pitt-cicd-demo
          IMAGE_TAG: ${{ github.run_id }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  testenvcreate:
    needs: container
    name: Test Environment Create
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Apply
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          TF_VAR_image_tag: ${{ github.run_id }}
          TF_VAR_environment: test
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve
        working-directory: ./infrastructure

  performance:
    needs: testenvcreate
    name: Performance Test
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Output
        id: tf_output
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: echo ::set-output name=api_endpoint::$(terraform output api_endpoint)
        working-directory: ./infrastructure

      - name: Run k6 test
        uses: grafana/k6-action@v0.2.0
        #continue-on-error: true
        with:
          filename: tests/performance/performance.js
        env:
          API_ENDPOINT: ${{ steps.tf_output.outputs.api_endpoint }}

      - name: Get Load Test Result
        id: loadtest
        run: echo ::set-output name=RESULT::$(cat loadtest-results.txt)

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          RESULT: "${{ steps.loadtest.outputs.RESULT }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `<details><summary>Load Test Results</summary>

            \`\`\`\n
            ${process.env.RESULT}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Publish Load Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./**/TESTS-*.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}

  testenvdestroy:
    needs: performance
    name: Test Environment Destroy
    environment: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Destroy
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          TF_VAR_image_tag: ${{ github.run_id }}
          TF_VAR_environment: test
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform destroy -auto-approve
        working-directory: ./infrastructure

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #role-to-assume: ${{ secrets.TF_VAR_ASSUME_ROLE_ARN }}
          #role-duration-seconds: 900
          aws-region: us-east-1

      - name: Clean Up Test Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pitt-cicd-demo
          IMAGE_TAG: ${{ github.run_id }}
        run: |
          aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG

  terraform:
    needs: testenvdestroy
    name: Terraform Plan
    environment: prod
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./infrastructure

      - name: Terraform Init
        id: init
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Validate
        id: validate
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform validate -no-color
        working-directory: ./infrastructure

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./infrastructure
        env:
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          TF_VAR_image_tag: latest
          TF_VAR_environment: prod
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
